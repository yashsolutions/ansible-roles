- name: get internal-es-01 subnet cidr
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc.vpc_id }}"
      "tag:Name": "{{ item }}"
  with_items:
    - internal-es-01
  register: subnet_facts

- set_fact:
    subnet_ids: "{{ subnet_facts.results|map(attribute='subnets.0.id')|list }}"

- name: security group for internal-es
  ec2_group:
    name: internal-swarm
    description: internal-swarm
    vpc_id: "{{ vpc.vpc_id }}"
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    purge_rules: yes
    purge_rules_egress: yes
    rules:
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 10.1.2.0/24
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 10.1.3.0/24
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 10.1.12.0/24
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 10.1.13.0/24
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 10.1.14.0/24
    rules_egress:
      - proto: all
        from_port: all
        to_port: all
        cidr_ip: 0.0.0.0/0
  register: group

- name: Ensure tags are present
  ec2_tag:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    resource: "{{ group.group_id }}"
    state: present
    tags:
      Name: internal-es

- name: setup internal-es-01
  ec2:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    key_name: ansible
    instance_type: m4.large
    image: ami-efd0428f
    wait: no
    exact_count: 1
    group: internal-es
    vpc_subnet_id: "{{ subnet_ids[0] }}"
    assign_public_ip: yes
    count_tag:
      Name: internal-es-01
    instance_tags:
      Name: internal-es-01
  register: instance

- name: setup DNS record
  route53:
    command: create
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    zone: ip
    private_zone: true
    record: "{{ instance.tagged_instances[0].tags.Name }}.ip"
    type: A
    ttl: 300
    value: "{{ instance.tagged_instances[0].private_ip }}"
    wait: no
    overwrite: true

- name: get internal-es-02 subnet cidr
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc.vpc_id }}"
      "tag:Name": "{{ item }}"
  with_items:
    - internal-es-02
  register: subnet_facts

- set_fact:
    subnet_ids: "{{ subnet_facts.results|map(attribute='subnets.0.id')|list }}"

- name: setup internal-es-02
  ec2:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    key_name: ansible
    instance_type: m4.large
    image: ami-efd0428f
    wait: no
    exact_count: 1
    group: internal-es
    vpc_subnet_id: "{{ subnet_ids[0] }}"
    assign_public_ip: yes
    count_tag:
      Name: internal-es-02
    instance_tags:
      Name: internal-es-02
  register: instance

- name: setup DNS record
  route53:
    command: create
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    zone: ip
    private_zone: true
    record: "{{ instance.tagged_instances[0].tags.Name }}.ip"
    type: A
    ttl: 300
    value: "{{ instance.tagged_instances[0].private_ip }}"
    wait: no
    overwrite: true

- name: get internal-es-03 subnet cidr
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc.vpc_id }}"
      "tag:Name": "{{ item }}"
  with_items:
    - internal-es-03
  register: subnet_facts

- set_fact:
    subnet_ids: "{{ subnet_facts.results|map(attribute='subnets.0.id')|list }}"

- name: setup internal-es-03
  ec2:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    key_name: ansible
    instance_type: m4.large
    image: ami-efd0428f
    wait: no
    exact_count: 1
    group: internal-es
    vpc_subnet_id: "{{ subnet_ids[0] }}"
    assign_public_ip: yes
    count_tag:
      Name: internal-es-03
    instance_tags:
      Name: internal-es-03
  register: instance

- name: setup DNS record
  route53:
    command: create
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    zone: ip
    private_zone: true
    record: "{{ instance.tagged_instances[0].tags.Name }}.ip"
    type: A
    ttl: 300
    value: "{{ instance.tagged_instances[0].private_ip }}"
    wait: no
    overwrite: true
