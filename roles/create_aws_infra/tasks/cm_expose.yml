
- name: get expose subnet cidr
  ec2_vpc_subnet_facts:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc.vpc_id }}"
      "tag:Name": "{{ item }}"
  with_items:
    - expose
  register: subnet_facts

- set_fact:
    subnet_ids: "{{ subnet_facts.results|map(attribute='subnets.0.id')|list }}"

- name: security group for bastion
  ec2_group:
    name: bastion
    description: bastion
    vpc_id: "{{ vpc.vpc_id }}"
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    purge_rules: yes
    purge_rules_egress: yes
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.1.2.0/24
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
  register: group 

- name: Ensure tags are present
  ec2_tag:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    resource: "{{ group.group_id }}"
    state: present
    tags:
      Name: bastion

- name: setup bastion
  ec2:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    key_name: ansible
    instance_type: t2.small
    image: "{{ ami }}"
    wait: no
    exact_count: 1
    group: bastion
    vpc_subnet_id: "{{ subnet_ids[0] }}"
    assign_public_ip: yes
    count_tag:
      Name: bastion
    instance_tags:
      Name: bastion
  register: instance

- name: setup DNS record
  route53:
    command: create
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    zone: ip
    private_zone: true
    record: "{{ instance.tagged_instances[0].tags.Name }}.ip"
    type: A
    ttl: 300
    value: "{{ instance.tagged_instances[0].private_ip }}"
    wait: no
    overwrite: true

- name: security group for openvpn
  ec2_group:
    name: openvpn
    description: openvpn
    vpc_id: "{{ vpc.vpc_id }}"
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    purge_rules: yes
    purge_rules_egress: yes
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.1.0.0/16
    rules_egress:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.1.0.0/16
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
  register: group

- name: Ensure tags are present
  ec2_tag:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    resource: "{{ group.group_id }}"
    state: present
    tags:
      Name: openvpn

- name: setup openvpn
  ec2:
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    region: "{{ region }}"
    key_name: ansible
    instance_type: t2.small
    image: "{{ ami }}"
    wait: no
    exact_count: 1
    group: openvpn
    vpc_subnet_id: "{{ subnet_ids[0] }}"
    assign_public_ip: yes
    count_tag:
      Name: openvpn
    instance_tags:
      Name: openvpn
  register: instance

- name: setup DNS record
  route53:
    command: create
    aws_access_key: "{{ aws.ansible.key }}"
    aws_secret_key: "{{ aws.ansible.secret }}"
    zone: ip
    private_zone: true
    record: "{{ instance.tagged_instances[0].tags.Name }}.ip"
    type: A
    ttl: 300
    value: "{{ instance.tagged_instances[0].private_ip }}"
    wait: no
    overwrite: true
